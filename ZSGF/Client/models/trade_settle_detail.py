# coding: utf-8

"""
    用户全部 API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TradeSettleDetail(BaseModel):
    """
    TradeSettleDetail
    """ # noqa: E501
    amount: Optional[StrictStr] = None
    operation_dt: Optional[StrictStr] = Field(default=None, alias="operationDt")
    operation_serial_no: Optional[StrictStr] = Field(default=None, alias="operationSerialNo")
    operation_type: Optional[StrictStr] = Field(default=None, alias="operationType")
    ori_trans_in: Optional[StrictStr] = Field(default=None, alias="oriTransIn")
    ori_trans_out: Optional[StrictStr] = Field(default=None, alias="oriTransOut")
    trans_in: Optional[StrictStr] = Field(default=None, alias="transIn")
    trans_out: Optional[StrictStr] = Field(default=None, alias="transOut")
    __properties: ClassVar[List[str]] = ["amount", "operationDt", "operationSerialNo", "operationType", "oriTransIn", "oriTransOut", "transIn", "transOut"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TradeSettleDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if operation_dt (nullable) is None
        # and model_fields_set contains the field
        if self.operation_dt is None and "operation_dt" in self.model_fields_set:
            _dict['operationDt'] = None

        # set to None if operation_serial_no (nullable) is None
        # and model_fields_set contains the field
        if self.operation_serial_no is None and "operation_serial_no" in self.model_fields_set:
            _dict['operationSerialNo'] = None

        # set to None if operation_type (nullable) is None
        # and model_fields_set contains the field
        if self.operation_type is None and "operation_type" in self.model_fields_set:
            _dict['operationType'] = None

        # set to None if ori_trans_in (nullable) is None
        # and model_fields_set contains the field
        if self.ori_trans_in is None and "ori_trans_in" in self.model_fields_set:
            _dict['oriTransIn'] = None

        # set to None if ori_trans_out (nullable) is None
        # and model_fields_set contains the field
        if self.ori_trans_out is None and "ori_trans_out" in self.model_fields_set:
            _dict['oriTransOut'] = None

        # set to None if trans_in (nullable) is None
        # and model_fields_set contains the field
        if self.trans_in is None and "trans_in" in self.model_fields_set:
            _dict['transIn'] = None

        # set to None if trans_out (nullable) is None
        # and model_fields_set contains the field
        if self.trans_out is None and "trans_out" in self.model_fields_set:
            _dict['transOut'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TradeSettleDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "operationDt": obj.get("operationDt"),
            "operationSerialNo": obj.get("operationSerialNo"),
            "operationType": obj.get("operationType"),
            "oriTransIn": obj.get("oriTransIn"),
            "oriTransOut": obj.get("oriTransOut"),
            "transIn": obj.get("transIn"),
            "transOut": obj.get("transOut")
        })
        return _obj



# coding: utf-8

"""
    用户全部 API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ZSGF.Client.models.refund_sub_fee import RefundSubFee
from typing import Optional, Set
from typing_extensions import Self

class RefundChargeInfo(BaseModel):
    """
    RefundChargeInfo
    """ # noqa: E501
    charge_type: Optional[StrictStr] = Field(default=None, alias="chargeType")
    refund_charge_fee: Optional[StrictStr] = Field(default=None, alias="refundChargeFee")
    refund_sub_fee_detail_list: Optional[List[RefundSubFee]] = Field(default=None, alias="refundSubFeeDetailList")
    switch_fee_rate: Optional[StrictStr] = Field(default=None, alias="switchFeeRate")
    __properties: ClassVar[List[str]] = ["chargeType", "refundChargeFee", "refundSubFeeDetailList", "switchFeeRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundChargeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in refund_sub_fee_detail_list (list)
        _items = []
        if self.refund_sub_fee_detail_list:
            for _item_refund_sub_fee_detail_list in self.refund_sub_fee_detail_list:
                if _item_refund_sub_fee_detail_list:
                    _items.append(_item_refund_sub_fee_detail_list.to_dict())
            _dict['refundSubFeeDetailList'] = _items
        # set to None if charge_type (nullable) is None
        # and model_fields_set contains the field
        if self.charge_type is None and "charge_type" in self.model_fields_set:
            _dict['chargeType'] = None

        # set to None if refund_charge_fee (nullable) is None
        # and model_fields_set contains the field
        if self.refund_charge_fee is None and "refund_charge_fee" in self.model_fields_set:
            _dict['refundChargeFee'] = None

        # set to None if refund_sub_fee_detail_list (nullable) is None
        # and model_fields_set contains the field
        if self.refund_sub_fee_detail_list is None and "refund_sub_fee_detail_list" in self.model_fields_set:
            _dict['refundSubFeeDetailList'] = None

        # set to None if switch_fee_rate (nullable) is None
        # and model_fields_set contains the field
        if self.switch_fee_rate is None and "switch_fee_rate" in self.model_fields_set:
            _dict['switchFeeRate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundChargeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeType": obj.get("chargeType"),
            "refundChargeFee": obj.get("refundChargeFee"),
            "refundSubFeeDetailList": [RefundSubFee.from_dict(_item) for _item in obj["refundSubFeeDetailList"]] if obj.get("refundSubFeeDetailList") is not None else None,
            "switchFeeRate": obj.get("switchFeeRate")
        })
        return _obj



# coding: utf-8

"""
    用户全部 API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PhoneSignInRequest(BaseModel):
    """
    PhoneSignInRequest
    """ # noqa: E501
    phone: Annotated[str, Field(min_length=1, strict=True)] = Field(description="用户手机号")
    verify_code: Annotated[str, Field(min_length=1, strict=True)] = Field(description="验证码，长度为4到8位的数字", alias="verifyCode")
    two_factor_code: Optional[Annotated[str, Field(min_length=6, strict=True, max_length=6)]] = Field(default=None, description="双因素认证代码，如果启用双因素认证登录，则必填，长度必须为6个字符，只能包含数字", alias="twoFactorCode")
    __properties: ClassVar[List[str]] = ["phone", "verifyCode", "twoFactorCode"]

    @field_validator('verify_code')
    def verify_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\d{4,8}$", value):
            raise ValueError(r"must validate the regular expression /\d{4,8}$/")
        return value

    @field_validator('two_factor_code')
    def two_factor_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneSignInRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if two_factor_code (nullable) is None
        # and model_fields_set contains the field
        if self.two_factor_code is None and "two_factor_code" in self.model_fields_set:
            _dict['twoFactorCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneSignInRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "phone": obj.get("phone"),
            "verifyCode": obj.get("verifyCode"),
            "twoFactorCode": obj.get("twoFactorCode")
        })
        return _obj



# coding: utf-8

"""
    用户全部 API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MySqlGeometry(BaseModel):
    """
    MySqlGeometry
    """ # noqa: E501
    x_coordinate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="xCoordinate")
    y_coordinate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="yCoordinate")
    srid: Optional[StrictInt] = None
    is_null: Optional[StrictBool] = Field(default=None, alias="isNull")
    value: Optional[Union[StrictBytes, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["xCoordinate", "yCoordinate", "srid", "isNull", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MySqlGeometry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "x_coordinate",
            "y_coordinate",
            "srid",
            "value",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if x_coordinate (nullable) is None
        # and model_fields_set contains the field
        if self.x_coordinate is None and "x_coordinate" in self.model_fields_set:
            _dict['xCoordinate'] = None

        # set to None if y_coordinate (nullable) is None
        # and model_fields_set contains the field
        if self.y_coordinate is None and "y_coordinate" in self.model_fields_set:
            _dict['yCoordinate'] = None

        # set to None if srid (nullable) is None
        # and model_fields_set contains the field
        if self.srid is None and "srid" in self.model_fields_set:
            _dict['srid'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MySqlGeometry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xCoordinate": obj.get("xCoordinate"),
            "yCoordinate": obj.get("yCoordinate"),
            "srid": obj.get("srid"),
            "isNull": obj.get("isNull"),
            "value": obj.get("value")
        })
        return _obj


